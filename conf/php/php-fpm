#!/bin/bash

#
# chkconfig: 345 70 70
# description: PHP-FPM server daemon
#
# Write by adam.li@ismole.com
# Modify at 2011/08/29
# Just for RedHat/CentOS Debian/Ubuntu SUSE
# source function library

RETVAL=0
PROG="php-fpm"
PREFIX="/usr/local/php"
DAEMON="${PREFIX}/sbin/php-fpm"
CONF="${PREFIX}/etc/php-fpm.conf"
PIDFILE="/var/run/$PROG.pid"
LOCKFILE="/var/lock/$PROG"

php_opts="--fpm-config $CONF"

#Common Function
MOVE_TO_COL="echo -en \\033[60G"
COLOR_SUCCESS="echo -en \\033[1;40;32m"
COLOR_FAILED="echo -en \\033[1;40;31m"
COLOR_WARNING="echo -en \\033[1;40;33m"
COLOR_NORMAL="echo -en \\033[0m"

success(){
    $MOVE_TO_COL
    echo -n "["
    $COLOR_SUCCESS
    echo -n " OK "
    $COLOR_NORMAL
    echo    "]"
}

failed(){
    $MOVE_TO_COL
    echo -n "["
    $COLOR_FAILED
    echo -n " FAILED "
    $COLOR_NORMAL
    echo    "]"
}

warning(){
    $MOVE_TO_COL
    echo -n "["
    $COLOR_WARNING
    echo -n " OK "
    $COLOR_NORMAL
    echo    "]"
}

checkpid() {
    local i
    for i in $* ; do
        [ -d "/proc/$i" ] && return 0
    done
    return 1
}

configtest() {
    echo -n "Configtest $PROG : "
    $DAEMON -t > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        success
    else
        failed && exit 1
    fi
}

start() {
    echo -n "Starting $PROG : "
    PROC_PID=$(pgrep -P 1 -u root ^$PROG)
    if [ -n "$PROC_PID" ]; then
        echo -n "is already running."
        failed && exit 1
    else
        $DAEMON $php_opts
        if [  $? -eq 0 ]; then
            success && touch $LOCKFILE
        else
            failed && exit 1
        fi
    fi
}

stop() {
    echo -n "Stopping $PROG : "
    PROC_PID=$(pgrep -P 1 -u root ^$PROG)
    if [ -z "$PROC_PID" ]; then
        echo -n "is not running."
        failed && exit 3
    else
        kill -TERM $PROC_PID>/dev/null 2>&1
        while $(checkpid $PROC_PID); do
            echo -n "." && sleep 0.001s
        done
        success && rm -f $LOCKFILE
    fi
}

quit() {
    echo -n "Gracefully shuttding down $PROG : "
    PROC_PID=$(pgrep -P 1 -u root ^$PROG)
    if [ -z "$PROC_PID" ]; then
        echo -n "is not running."
        failed && exit 3
    else
        kill -QUIT $PROC_PID >/dev/null 2>&1
        while $(checkpid $PROC_PID); do
            echo -n "." && sleep 0.001s
        done
        success && rm -f $LOCKFILE
    fi
}

reload() {
    echo -n "Reload service $PROG : "
    PROC_PID=$(pgrep -P 1 -u root ^$PROG)
    if [ -z "$PROC_PID" ]; then
        echo -n "is not running."
        failed && exit 3
    else
        kill -USR2 $PROC_PID
        success
    fi
}

logrotate() {
    echo -n "Re-opening $PROG log file : "
    PROC_PID=$(pgrep -P 1 -u root ^$PROG)
    if [ -z "$PROC_PID" ]; then
        echo -n "is not running."
        failed && exit 3
    else
        kill -USR1 $PROC_PID 
        success
    fi
}

restart() {
        echo -n $"Restart $PROG : "
        PROC_PID=$(pgrep -P 1 -u root ^$PROG)
        if [ -z "$PROC_PID" ];then
            echo -n "is not running."
            warning
            echo -en "\t" && start
        else
           echo
           echo -en "\t" && stop
           echo -en "\t" && start
        fi
}

status() {
        PROC_PID=$(pgrep -P 1 -u root ^$PROG)
        if [ -z "$PROC_PID" ];then
            echo "$PROG is stopped"
        else
            echo "$PROG (pid $PROC_PID) is running..."
        fi
}

case "$1" in
    start)
        configtest
        start    
        ;;
    stop)
        stop
	;;
    restart)
        configtest
        restart
        ;;
    reload)
        configtest
        reload
        ;;
    status)
        status
        ;;
    quit)
        quit
	;;
    logrotate)
        logrotate
        ;;
    configtest)
        configtest
        ;;
    *)
        echo "Usage: $0 {start|stop|quit|status|reload|restart|logrotate|configtest}"
        exit 1
    ;;

esac
